{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\django-vue-admin\\dvadmin-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrator\\Desktop\\django-vue-admin\\dvadmin-ui\\src\\components\\CommonStaticTable\\index.vue?vue&type=style&index=0&id=29ab0150&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\django-vue-admin\\dvadmin-ui\\src\\components\\CommonStaticTable\\index.vue","mtime":1620833396749},{"path":"C:\\Users\\Administrator\\Desktop\\django-vue-admin\\dvadmin-ui\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\django-vue-admin\\dvadmin-ui\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\django-vue-admin\\dvadmin-ui\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\django-vue-admin\\dvadmin-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\django-vue-admin\\dvadmin-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5waWNrZXIgewogIHdpZHRoOiAyNDBweDsKfQouZWwtcGFnaW5hdGlvbiB7CiAgcGFkZGluZzogNXB4Owp9Ci5yaWdodF9wYWdpbmF0aW9uIHsKICB0ZXh0LWFsaWduOiByaWdodDsKICBwYWRkaW5nLXRvcDogMjBweDsKfQo="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAscA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/components/CommonStaticTable","sourcesContent":["<!--\n@description: 封装组件\n-->\n<template>\n  <div style=\"padding-left: 10px;\">\n    <el-row v-if=\"topLayout\" style=\"margin-bottom: 20px\">\n      <el-col v-if=\"topLayoutLeft\" :span=\"18\">\n        <div class=\"grid-content bg-purple\">\n          <el-input\n            v-model=\"searchForm.search\"\n            :disabled=\"tableLoading\"\n            :size=\"$ELEMENT.size\"\n            :placeholder=\"filterPlaceholder\"\n            clearable\n            style=\"width: 200px;\"\n            @keyup.enter.native=\"handleSearchFormSubmit\"/>\n          <el-button\n            :size=\"$ELEMENT.size\"\n            type=\"primary\"\n            title=\"过滤\"\n            @click=\"handleSearchFormSubmit\">\n            <common-icon value=\"svg:icon-filter\"/>\n          </el-button>\n          <el-button\n            v-show=\"isFilter\"\n            :size=\"$ELEMENT.size\"\n            type=\"info\"\n            title=\"取消过滤\"\n            style=\"margin-left: 0;\"\n            @click=\"handleCancelFilter\">\n            <common-icon value=\"svg:icon-unfilter\"/>\n          </el-button>\n          <slot name=\"button\"/>\n        </div>\n      </el-col>\n      <el-col v-if=\"topLayoutRight\" :span=\"6\">\n        <div class=\"grid-content bg-purple-light\" style=\"text-align: right\">\n          <slot name=\"tools\"/>\n          <el-button\n            :size=\"$ELEMENT.size\"\n            name=\"refresh\"\n            type=\"info\"\n            title=\"导出数据\"\n            @click=\"handleExportTableData\">\n            <svg-icon icon-class=\"icon-excel\" style=\"font-size: 1em\"/>\n          </el-button>\n          <el-popover\n            placement=\"bottom\"\n            width=\"200\"\n            trigger=\"click\">\n            <div style=\"width: 50px;\">\n              <el-checkbox-group v-model=\"showFields\">\n                <el-checkbox\n                  v-for=\"(field, index) in fields\"\n                  :key=\"index\"\n                  :label=\"field\"\n                  :checked=\"field.show\"\n                  style=\"width: 100%\"\n                  @change=\"handleSelectField($event, field)\">{{ field.label }}</el-checkbox>\n              </el-checkbox-group>\n            </div>\n            <el-button\n              slot=\"reference\"\n              :size=\"$ELEMENT.size\"\n              name=\"refresh\"\n              type=\"info\"\n              icon=\"el-icon-s-fold\"\n              title=\"设置显示的字段\"/>\n          </el-popover>\n        </div>\n      </el-col>\n    </el-row>\n    <el-table\n      v-loading=\"tableLoading\"\n      ref=\"table\"\n      :data=\"filterData\"\n      :span-method=\"spanMethod\"\n      :max-height=\"maxHeight\"\n      :row-key=\"getRowKeys\"\n      :stripe=\"stripe\"\n      :fit=\"fit\"\n      :border=\"border\"\n      :empty-text=\"emptyText\"\n      :highlight-current-row=\"highlightCurrentRow\"\n      :show-overflow-tooltip=\"showOverflowTooltip\"\n      @cell-click=\"handleCellClick\"\n      @cell-dblclick=\"handleCellDbClick\"\n      @header-click=\"handleHeaderClick\"\n      @row-click=\"handleRowClick\"\n      @row-dblclick=\"handleRowDblClick\"\n      @selection-change=\"handleSelectionChange\">\n      <el-table-column\n        v-if=\"selection\"\n        :reserve-selection=\"true\"\n        type=\"selection\"\n        width=\"50\"/>\n      <template v-for=\"field in fields\">\n        <el-table-column\n          v-if=\"field.show\"\n          :key=\"field.prop\"\n          :prop=\"field.prop\"\n          :label=\"field.label\"\n          :sortable=\"field.sortable\"\n          :width=\"field.width || ''\"\n          show-overflow-tooltip>\n          <template slot-scope=\"scope\">\n            <slot :name=\"field.prop\" :values=\"scope.row\" :prop=\"field.prop\" :field=\"field\">\n              <span v-html=\"formatColumnData(scope.row, field)\"/>\n            </slot>\n          </template>\n        </el-table-column>\n      </template>\n      <slot name=\"column\"/>\n    </el-table>\n    <el-row>\n      <el-col :span=\"6\" style=\"margin-top: 20px\">\n        <span>已选择:<span style=\"color: #ff00ff;font-weight: bold;\">{{ multipleSelection.length }}</span>条</span>\n        <el-button\n          v-show=\"multipleSelection.length\"\n          type=\"info\"\n          size=\"mini\"\n          title=\"清空多选\"\n          @click=\"clearMultipleSelection\">清空</el-button>\n      </el-col>\n      <el-col :span=\"18\" style=\"margin-top: 20px; text-align: right\">\n        <span>总计:<span style=\"color: #ff00ff;font-weight: bold;\">{{ filterData.length }}</span>条</span>\n      </el-col>\n    </el-row>\n  </div>\n</template>\n<script>\n  import moment from 'moment';\n  import * as Utils from '@/utils';\n  export default {\n    name: 'CommonStaticTable',\n    props: {\n      value: {\n        type: Array,\n        default: () => []\n      },\n      spanMethod: {\n        type: Function,\n        default: null\n      },\n      data: {\n        type: Array,\n        default: () => []\n      },\n      initSelected: {\n        type: Array,\n        default: () => []\n      },\n      // eslint-disable-next-line vue/require-prop-types\n      maxHeight: {\n        default: 700\n      },\n      stripe: {\n        type: Boolean,\n        default: true\n      },\n      fit: {\n        type: Boolean,\n        default: true\n      },\n      highlightCurrentRow: {\n        type: Boolean,\n        default: true\n      },\n      showOverflowTooltip: {\n        type: Boolean,\n        default: true\n      },\n      border: {\n        type: Boolean,\n        default: false\n      },\n      emptyText: {\n        type: String,\n        default: '暂无数据'\n      },\n      topLayout: {\n        type: Array,\n        default: () => {\n          return ['left', 'right'];\n        }\n      },\n      bottomLayout: {\n        type: Array,\n        default: () => {\n          return ['left', 'right'];\n        }\n      },\n      fields: {\n        // 后端返回的字段\n        type: Array,\n        default: () => {\n          return [];\n        }\n      },\n      selection: {\n        // 开始开启多选(默认不开启, false)\n        type: Boolean,\n        default: false\n      },\n      // api 对象\n      api: {\n        type: Function,\n        default: null\n      },\n      params: {\n        type: Object,\n        default: () => {\n          return {};\n        }\n      }\n    },\n    data() {\n      return {\n        tableEditable: true,\n        showFields: [], // 显示的字段\n        filterFields: [], // 过滤的字段\n        filterPlaceholder: '过滤', // 过滤提示文字\n        buttonTagList: [], // 所有按钮标签\n        excelDialogVisible: false,\n        tableLoading: false,\n        advancedSearchForm: {},\n        advancedSearchFields: [],\n        rowKey: null,\n        multipleSelection: [],\n        excelHeader: [],\n        excelData: [],\n        searchForm: {\n          search: ''\n        },\n        getRowKeys: row => {\n          if (this.rowKey) {\n            return row[this.rowKey];\n          }\n          return row.id || row.uuid;\n        },\n        exportFields: [],\n        tableData: [],\n        filterData: [],\n        isFilter: false\n      };\n    },\n    computed: {\n      topLayoutLeft() {\n        return this.topLayout.indexOf('left') >= 0;\n      },\n      topLayoutRight() {\n        return this.topLayout.indexOf('right') >= 0;\n      }\n    },\n    watch: {\n      data: {\n        handler: function(newData, oldData) {\n          this.handleChangeTableData(newData);\n        },\n        immediate: true\n      }\n    },\n    mounted() {\n    },\n    created() {\n      this.initComponentData();\n      this.initData();\n      this.initSelect();\n    },\n    methods: {\n      initData() {\n        if (Utils.isFunction(this.api)) {\n          this.listInterfaceData();\n        }\n      },\n      initSelect() {\n        for (const row of this.initSelected) {\n          this.$refs['table'].toggleRowSelection(row, true);\n        }\n      },\n      initComponentData() {\n        this.fields.forEach(field => {\n          field.show = (!!field.show);\n          field.type = (field.type || 'string').toLocaleLowerCase();\n          field.label = field.label || field.prop;\n          field.search = (!!field.search);\n          field.sortable = (!!field.sortable);\n          field.unique = (!!field.unique);\n          field.width = field.width || '';\n          if (field.type === 'choices') {\n            if (Utils.isArray(field.choices) && field.choices.length > 0) {\n              if (!Utils.isObj(field.choices[0])) {\n                field.choices = field.choices.map(value => {\n                  return {\n                    label: value,\n                    value: value\n                  };\n                });\n              }\n            }\n          }\n          field.unique = (!!field.unique);\n          if (field.unique) {\n            this.rowKey = field.prop;\n          }\n        });\n        this.filterFields = this.fields.filter(field => field.search).map(field => field.prop);\n        if (this.filterFields.length) {\n          const text = this.fields.filter(field => field.search).map(field => field.label).join('、');\n          this.filterPlaceholder = `${text} 过滤`;\n        }\n      },\n      listInterfaceData() {\n        this.tableLoading = true;\n        this.api(this.params).then(response => {\n          this.tableLoading = false;\n          this.handleChangeTableData(response.data);\n        }).catch(() => {\n          this.tableLoading = false;\n        });\n      },\n      formatColumnData(row, field) {\n        const type = field.type || 'string';\n        const prop = field.prop;\n        if (field.formatter && typeof field.formatter === 'function') {\n          return field.formatter(row, prop, type);\n        }\n        if (type === 'string') {\n          return row[prop];\n        } else if (type === 'datetime') {\n          return this.formatDatetime(row[prop]);\n        } else if (type === 'date') {\n          return this.formatDate(row[prop]);\n        } else if (type === 'time') {\n          return this.formatTime(row[prop]);\n        } else if (type.startsWith('bool')) {\n          return row[prop] ? '是' : '否';\n        } else if (type === 'choices') {\n          const choices = field.choices;\n          return this.formatChoices(choices, row[prop]);\n        } else {\n          return row[prop];\n        }\n      },\n      formatChoices(choices, value) {\n        for (const choice of choices) {\n          if (choice.value === value) {\n            return choice.label;\n          }\n        }\n        return value;\n      },\n      formatDatetime(datetime) {\n        return moment(datetime).format('YYYY-MM-DD HH:mm:ss');\n      },\n      formatDate(date) {\n        return moment(date).format('YYYY-MM-DD');\n      },\n      formatTime(time) {\n        return moment(time).format('HH:mm:ss');\n      },\n      getMultipleSelection() {\n        return this.multipleSelection || [];\n      },\n      clearMultipleSelection() {\n        this.$refs.table.clearSelection();\n      },\n      clearSelection() {\n        this.$refs.table.clearSelection();\n      },\n      clearFilter() {\n        // 重置过滤\n        this.searchForm.search = '';\n        this.filterData = Array.from(this.tableData);\n      },\n      handleSelectField(e, field) {\n        field.show = e;\n      },\n      handleChangeTableData(data) {\n        this.tableData = Array.from(data);\n        this.filterData = Array.from(this.filterHandler(this.tableData));\n      },\n      // 导出表格的数据, 当前数据、当前列\n      handleExportTableData() {\n        this.excelDialogVisible = true;\n        this.exportFields = this.fields.map(field => {\n          return { prop: field.prop, label: field.label, show: field.show };\n        });\n        this.excelHeader = this.showFields.map(field => field['prop']);\n      },\n      // 处理修改多选的值\n      handleSelectionChange(val) {\n        this.$emit('selection-change', val);\n        this.multipleSelection = val;\n      },\n      handleSortChange(val) {\n        this.sort.prop = val.prop;\n        this.sort.order = val.order;\n        this.getTableData();\n      },\n      filterHandler(data) {\n        if (!data) {\n          data = this.tableData || [];\n        }\n        const search = this.searchForm.search.trim();\n        if (!search.length || !this.filterFields.length) {\n          this.isFilter = false;\n          return data;\n        }\n        const filterData = data.filter(row => {\n          for (const field of this.filterFields) {\n            if (row[field] && row[field].indexOf(search) >= 0) {\n              return true;\n            }\n          }\n          return false;\n        });\n        this.isFilter = true;\n        return filterData;\n      },\n      handleCellClick(row, column, cell, event) {\n        this.$emit('cell-click', row, column, cell, event);\n      },\n      handleCellDbClick(row, column, cell, event) {\n        this.$emit('cell-dblclick', row, column, cell, event);\n      },\n      handleRowClick(row, column, event) {\n        this.$emit('row-click', row, column, event);\n      },\n      handleRowDblClick(row, column, event) {\n        this.$emit('row-dblclick', row, column, event);\n      },\n      handleHeaderClick(column, event) {\n        this.$emit('header-click', column, event);\n      },\n      toggleRowSelection(row, selected = true) {\n        this.$refs.table.toggleRowSelection(row, selected);\n      },\n      toggleFilter() {\n        // 触发过滤\n        this.filterData = Array.from(this.filterHandler());\n      },\n      handleSearchFormSubmit() {\n        this.toggleFilter();\n      },\n      handleCancelFilter() {\n        this.isFilter = false;\n        this.clearFilter();\n      }\n    }\n  };\n</script>\n\n<style scoped>\n  .picker {\n    width: 240px;\n  }\n  .el-pagination {\n    padding: 5px;\n  }\n  .right_pagination {\n    text-align: right;\n    padding-top: 20px;\n  }\n</style>\n"]}]}